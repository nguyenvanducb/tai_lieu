1. C·∫•p ƒë·ªô T∆∞ duy & Ki·∫øn tr√∫c
| Ch·ªß ƒë·ªÅ                         | ƒêi·ªÅu ph·∫£i thu·ªôc n·∫±m l√≤ng                                                   |
| ------------------------------ | -------------------------------------------------------------------------- |
| **Clean Code**                 | Vi·∫øt code d·ªÖ ƒë·ªçc h∆°n l√† code ng·∫Øn. M·ªôt function = 1 nhi·ªám v·ª•.              |
| **SOLID Principles**           | 5 nguy√™n t·∫Øc v√†ng: SRP, OCP, LSP, ISP, DIP.                                |
| **Design Patterns**            | Bi·∫øt √≠t nh·∫•t: Singleton, Factory, Repository, Observer, Adapter, Strategy. |
| **Architecture Patterns**      | N·∫Øm r√µ MVC, MVVM, Clean Architecture, Microservices, Layered architecture. |
| **Domain-Driven Design (DDD)** | Bi·∫øt t√°ch domain, entity, service, repository, aggregate.                  |

2. C·∫•p ƒë·ªô Code & Refactor
| Ch·ªß ƒë·ªÅ                     | B·∫£ng c·ª≠u ch∆∞∆°ng t∆∞∆°ng ·ª©ng                                                              |
| -------------------------- | -------------------------------------------------------------------------------------- |
| **Code Smell**             | Bi·∫øt nh·∫≠n ra ‚Äúbad code smell‚Äù: God Class, Long Method, Duplicate Code, Feature Envy... |
| **Refactoring Techniques** | Rename, Extract Method, Inline, Replace Temp with Query, Introduce Parameter Object... |
| **Testing**                | Bi·∫øt vi·∫øt Unit Test, Mock, Stub, Integration Test.                                     |
| **Error Handling**         | Kh√¥ng nu·ªët l·ªói (`try/catch(e){}`), log ƒë√∫ng ch·ªó, c√≥ ph√¢n lo·∫°i error.                   |

3. C·∫•p ƒë·ªô System & Performance
| Ch·ªß ƒë·ªÅ            | B·∫£ng c·ª≠u ch∆∞∆°ng t∆∞∆°ng ·ª©ng                                        |
| ----------------- | ---------------------------------------------------------------- |
| **Concurrency**   | Hi·ªÉu thread-safe, async/await, deadlock, race condition.         |
| **Caching**       | Memory cache, Redis, cache invalidation.                         |
| **Database**      | Hi·ªÉu index, transaction, ACID, normalization vs denormalization. |
| **Scalability**   | Load balancing, horizontal vs vertical scaling, message queue.   |
| **Observability** | Logging, Metrics, Tracing, Alerting.                             |

4. C·∫•p ƒë·ªô Team & Delivery
| Ch·ªß ƒë·ªÅ            | B·∫£ng c·ª≠u ch∆∞∆°ng t∆∞∆°ng ·ª©ng                                          |
| ----------------- | ------------------------------------------------------------------ |
| **Git Flow**      | Branch, PR, Rebase, Tag, Release.                                  |
| **CI/CD**         | Build, Test, Deploy t·ª± ƒë·ªông, rollback an to√†n.                     |
| **Code Review**   | Bi·∫øt nh·∫≠n x√©t c√≥ t√¢m, c√≥ l√Ω, kh√¥ng ‚Äúb·ªõi m√≥c‚Äù.                      |
| **Documentation** | Vi·∫øt README, API doc, comment r√µ r√†ng.                             |
| **Mentoring**     | Bi·∫øt d·∫´n d·∫Øt junior, gi·∫£i th√≠ch v√¨ sao ch·ª© kh√¥ng ch·ªâ b·∫£o ‚Äúl√†m ƒëi‚Äù. |

5. C·∫•p ƒë·ªô T∆∞ duy s·∫£n ph·∫©m & kinh nghi·ªám
| Ch·ªß ƒë·ªÅ                 | B·∫£ng c·ª≠u ch∆∞∆°ng t∆∞∆°ng ·ª©ng                                               |
| ---------------------- | ----------------------------------------------------------------------- |
| **Problem Solving**    | Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ theo logic, kh√¥ng ‚Äúpatch t·∫°m‚Äù.                        |
| **Trade-off Thinking** | Hi·ªÉu c√°i g√¨ c·∫ßn t·ªëi ∆∞u, c√°i g√¨ ch·∫•p nh·∫≠n ‚Äúgood enough‚Äù.                 |
| **Security Awareness** | SQL Injection, XSS, CSRF, JWT, HTTPS.                                   |
| **Domain Knowledge**   | Hi·ªÉu r√µ lƒ©nh v·ª±c ·ª©ng d·ª•ng m√¨nh ƒëang code (Fintech, Logistics, SaaS...). |
| **Learning Mindset**   | Kh√¥ng t·ª± m√£n, lu√¥n h·ªçc th√™m pattern, framework, ng√¥n ng·ªØ m·ªõi.           |


Chi ti·∫øt: 
üß± T·ªïng quan SOLID:
| Ch·ªØ c√°i | T√™n ƒë·∫ßy ƒë·ªß                          | T√≥m t·∫Øt √Ω nghƒ©a                                                                |
| ------- | ----------------------------------- | ------------------------------------------------------------------------------ |
| **S**   | **Single Responsibility Principle** | M·ªói class ch·ªâ n√™n c√≥ **m·ªôt l√Ω do ƒë·ªÉ thay ƒë·ªïi**.                                |
| **O**   | **Open/Closed Principle**           | M·ªü ƒë·ªÉ m·ªü r·ªông, ƒë√≥ng ƒë·ªÉ ch·ªânh s·ª≠a.                                              |
| **L**   | **Liskov Substitution Principle**   | Class con **ph·∫£i c√≥ th·ªÉ thay th·∫ø** class cha m√† kh√¥ng l√†m thay ƒë·ªïi h√†nh vi.    |
| **I**   | **Interface Segregation Principle** | Nhi·ªÅu interface nh·ªè t·ªët h∆°n 1 interface kh·ªïng l·ªì.                              |
| **D**   | **Dependency Inversion Principle**  | Ph·ª• thu·ªôc v√†o **abstraction (interface)**, kh√¥ng ph·ª• thu·ªôc v√†o implementation. |

| Nguy√™n t·∫Øc | G·ª£i nh·ªõ                       | T√°c d·ª•ng                  |
| ---------- | ----------------------------- | ------------------------- |
| **S**      | M·ªôt class ‚Äì m·ªôt vi·ªác          | Gi·∫£m r·ªëi, d·ªÖ b·∫£o tr√¨      |
| **O**      | M·ªü r·ªông, kh√¥ng s·ª≠a c≈©         | D·ªÖ m·ªü r·ªông, √≠t l·ªói        |
| **L**      | Con thay cha ƒë∆∞·ª£c             | Gi·ªØ ƒë√∫ng h√†nh vi          |
| **I**      | Interface nh·ªè, ƒë√∫ng ch·ª©c nƒÉng | Linh ho·∫°t, d·ªÖ t√°i s·ª≠ d·ª•ng |
| **D**      | Code ph·ª• thu·ªôc interface      | D·ªÖ thay th·∫ø, test d·ªÖ h∆°n  |

‚ùå get_it kh√¥ng ph·∫£i l√† Signal Pattern (hay Event/Observer Pattern).
‚úÖ get_it l√† m·ªôt Service Locator Pattern, thu·ªôc h·ªç Dependency Injection (DI).
get_it cung c·∫•p m·ªôt n∆°i trung t√¢m (container) ƒë·ªÉ b·∫°n:
ƒêƒÉng k√Ω (register) c√°c dependency (service, repository, config‚Ä¶)
Truy xu·∫•t (locate) ch√∫ng t·ª´ b·∫•t k·ª≥ n∆°i n√†o trong app m√† kh√¥ng c·∫ßn truy·ªÅn qua constructor ho·∫∑c context

| Ti√™u ch√≠                         | `get_it`                                    | Signal / Event / Observer                 |
| -------------------------------- | ------------------------------------------- | ----------------------------------------- |
| M·ª•c ƒë√≠ch                         | Cung c·∫•p object, qu·∫£n l√Ω dependency         | Th√¥ng b√°o thay ƒë·ªïi, ph√°t t√≠n hi·ªáu         |
| Lo·∫°i pattern                     | **Service Locator / DI**                    | **Observer / Reactive**                   |
| C√≥ reactive (thay ƒë·ªïi ‚Üí update)? | ‚ùå Kh√¥ng                                     | ‚úÖ C√≥                                      |
| C·∫•u tr√∫c                         | Map type ‚Üí instance                         | Listeners / subscribers                   |
| S·ª≠ d·ª•ng khi                      | C·∫ßn chia s·∫ª service, repository, manager... | C·∫ßn ph·∫£n ·ª©ng khi c√≥ thay ƒë·ªïi d·ªØ li·ªáu      |
| V√≠ d·ª• th·ª±c t·∫ø                    | `AuthService`, `DatabaseService`            | `ValueNotifier`, `Stream`, `Signal`, `Rx` |


